name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions: read-all

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release, RelWithDebInfo ]
        os: [ windows-latest, ubuntu-latest ]

    name: Build on ${{ matrix.os }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Clang (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y -q
          sudo apt-get install -y -q build-essential lsb-release wget software-properties-common
          sudo wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh 15
          sudo apt-get install -y -q libc++-15-dev libc++abi-15-dev
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 100
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-15 100
          sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.lld-15 100
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64

      - name: Set up CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Set up Conan

        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect --force
          conan export third_party/funchook --version 1.1.3

      - name: Build with Conan (Linux)
        if: runner.os == 'Linux'
        run: |
          conan create . --build=missing -s compiler.cppstd=17 -s build_type=${{ matrix.build_type }} -c tools.cmake.cmaketoolchain:generator=Ninja -s compiler.libcxx=libc++

      - name: Build with Conan (Windows)
        if: runner.os == 'Windows'
        run: |
          conan create . --build=missing -s compiler.cppstd=17 -s build_type=${{ matrix.build_type }} -c tools.cmake.cmaketoolchain:generator=Ninja